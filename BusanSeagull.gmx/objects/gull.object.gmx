<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_gull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

global.p = 0;
global.time = 900;

is_can_collision = 0;

touch_index = 0;
touch_y = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stop vmoving

if y &lt; ystart {
    y = ystart;
    vspeed = 0;
    gravity = 0;
    
    image_blend = c_white;
}

if vspeed != 0 and image_xscale &gt;= 0 {
    image_angle = direction;
} else if vspeed != 0 and image_xscale &lt; 0 {
    image_angle = direction + 90 - 90 * sign(image_xscale);
} else {
    image_angle = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hmoving

is_hmoving = 0

if keyboard_check(vk_left) {
    is_hmoving = -1;
}

if keyboard_check(vk_right){
    is_hmoving = 1;
}

if 1=0{
for (var i = 0; i &lt; 2; i += 1) {
    if device_mouse_check_button_pressed(i, mb_left) {
        touch_index = i;
        touch_y = device_mouse_y(touch_index);
    }
}

if device_mouse_check_button(touch_index, mb_left) {
    if (device_mouse_x(touch_index) &lt; x) {
        is_hmoving = -1;
    } else {
        is_hmoving = 1;
    }
}
}

if is_hmoving == -1 {
    if hspeed &gt; -30 {
        hspeed -= 5
    }
    if image_xscale &gt;- 1 {
        image_xscale -= 0.5
    }
}

if is_hmoving == 1 {
    if hspeed &lt; 30 {
       hspeed += 5;
    }
    if image_xscale &lt; 1 {
        image_xscale += 0.5
    }
}


if is_hmoving = 0 {
    if hspeed &gt; 0 {
        hspeed -= 1;
    }
    if hspeed &lt; 0 {
        hspeed += 1;
    }
}

if bbox_left &lt; 0 {
    x -= bbox_left;
}

if bbox_right &gt; room_width {
    x -= bbox_right - room_width;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// vmoving

var is_vmoving = 0;
if 1=0{
if device_mouse_check_button(touch_index, mb_left) {
    if touch_y &lt; device_mouse_y(touch_index) - 10 {
        is_vmoving = 1;
    }
    touch_y = device_mouse_y(touch_index);  
}
}
if (is_vmoving or keyboard_check_pressed(vk_space)) and vspeed &lt;= 0 {
    if y == ystart {
        vspeed = 20;
        gravity = 3;
    } else {
        vspeed = -vspeed;
    }
    is_can_collision = 1;
}

if y &gt; room_height / 4 * 3 {
    y = room_height / 4 * 3;
    vspeed = -vspeed;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// game over

if (global.time &gt; 0) {
    global.time -= 1;
} else {    
    if (global.p &gt; global.high_score) {
        var map = ds_map_create();
        ds_map_add(map, 'high_score', global.p);
        ds_map_secure_save(map, 'high_score.dat');
        ds_map_destroy(map);
        global.high_score = global.p;
        

    }
    room_goto(start_game);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if is_can_collision == 1 {
    is_can_collision = 0;
    global.time -= room_speed;
    if global.time &lt; 0 {
        global.time = 0;
    }
    
    image_blend = c_red;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="cookie">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if is_can_collision == 1 {
    is_can_collision = 0;
    global.p += 1;
    audio_play_sound(sound_crunchy, 1, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>150,150</point>
  </PhysicsShapePoints>
</object>
